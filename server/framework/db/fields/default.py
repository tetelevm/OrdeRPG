from abc import abstractmethod


from sqlalchemy.sql.schema import Column
from sqlalchemy.sql.visitors import TraversibleType
from sqlalchemy.sql.type_api import TypeEngine


__all__ = [
    'FieldDefaultMeta',
    'FieldDefault',
    'FieldAutoGenerated',
]


class FieldAutoGenerated:
    """Interface for field class with autogenerated data."""

    @abstractmethod
    def generate(self, *args, **kwargs):
        """A method called to generate a value."""
        pass


class FieldDefaultMeta(TraversibleType):
    """
    Metaclass for `FieldDefault`.

    Made to provide extra functionality to field classes, currently
    constructing a default argument dictionary.
    """

    def __new__(mcs, clsname, bases, dct):
        dct = mcs.inherit_kwargs(bases, dct)
        return super(FieldDefaultMeta, mcs).__new__(mcs, clsname, bases, dct)

    @staticmethod
    def inherit_kwargs(bases, dct):
        """
        Constructs a default argument dictionary. Arguments of child
        classes will overwrite the same arguments of parent classes.
        """

        cls_default_kwargs = dct.get('_default_kwargs', dict())
        parent_default_kwargs = {
            key: val
            for cls in bases
            for (key, val) in getattr(cls, '_default_kwargs', dict()).items()
        }
        dct['_default_kwargs'] = parent_default_kwargs | cls_default_kwargs

        return dct


class FieldDefault(Column, metaclass=FieldDefaultMeta):
    """
    Abstract field class from which all new types of fields are
    inherited.

    If you want to create a new field class, you must inherit
    it from this class for other parts of the system to work correctly.
    """
    # TODO: here and in all child classes: explore and add `params` and `unique_params`

    column_type = TypeEngine
    _default_kwargs = dict()

    def __init__(self, **kwargs):
        kwargs = self._default_kwargs | kwargs
        kwargs['type_'] = self.column_type
        super().__init__(**kwargs)

    def __repr__(self):
        return super().__repr__().replace('Column', self.__class__.__name__)
