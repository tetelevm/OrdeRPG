"""
Field types to use in models.

This is done to make it easier to use when creating models, as well as
to allow customization and additional functionality to the standard
`Column` class.
"""

from abc import abstractmethod

from sqlalchemy.sql.schema import Column
from sqlalchemy.sql.sqltypes import BigInteger, String, DateTime
from sqlalchemy.sql.visitors import TraversibleType
from sqlalchemy.sql.type_api import TypeEngine

from server.utils.lib import generate_random_advanced_string
from server.utils.settings import settings


_all_ = [
    'IntegerField',
    'IdField',
    'StringField',
    'PasswordField',
    'RandomStringField',
    'DateTimeField',
]
__all__ = [
    'FieldDefaultMeta',
    'FieldDefault',
    'FieldAutoGenerated',
] + _all_


class FieldAutoGenerated:
    """Interface for field class with autogenerated data."""

    @abstractmethod
    def generate(self, *args, **kwargs):
        """A method called to generate a value."""
        pass


class FieldDefaultMeta(TraversibleType):
    """
    Metaclass for `FieldDefault`.

    Made to provide extra functionality to field classes, currently
    constructing a default argument dictionary.
    """

    def __new__(mcs, clsname, bases, dct):
        dct = mcs.inherit_kwargs(bases, dct)
        return super(FieldDefaultMeta, mcs).__new__(mcs, clsname, bases, dct)

    @staticmethod
    def inherit_kwargs(bases, dct):
        """
        Constructs a default argument dictionary. Arguments of child
        classes will overwrite the same arguments of parent classes.
        """

        cls_default_kwargs = dct.get('_default_kwargs', dict())
        parent_default_kwargs = {
            key: val
            for cls in bases
            for (key, val) in getattr(cls, '_default_kwargs', dict()).items()
        }
        dct['_default_kwargs'] = parent_default_kwargs | cls_default_kwargs

        return dct


class FieldDefault(Column, metaclass=FieldDefaultMeta):
    """
    Abstract field class from which all new types of fields are
    inherited.

    If you want to create a new field class, you must inherit
    it from this class for other parts of the system to work correctly.
    """
    # TODO: here and in all child classes: explore and add `params` and `unique_params`

    column_type = TypeEngine
    _default_kwargs = dict()

    def __init__(self, **kwargs):
        kwargs = self._default_kwargs | kwargs
        kwargs['type_'] = self.column_type
        super().__init__(**kwargs)

    def __repr__(self):
        return super().__repr__().replace('Column', self.__class__.__name__)


class IntegerField(FieldDefault):
    """
    Standard field of type Integer.

    The field type is a BigInteger out of consideration that in today's
    databases a few bytes do not play a particularly big role, but it
    saves programmers from overflow problems that were unexpected at the
    beginning of development.
    """

    column_type = BigInteger


class IdField(IntegerField):
    """IntegerField, with arguments for primary_key."""

    _default_kwargs = {
        'autoincrement': True,
        'index': True,
        'nullable': False,
        'primary_key': True,
        'unique': True,
    }


class StringField(FieldDefault):
    """
    Standard field with type String.

    The default is unlimited length, otherwise the length must be
    specified in `kwargs`.
    """

    column_type = String

    def __init__(self, string_length=None, **kwargs):
        self.column_type = self.column_type(length=string_length)
        super().__init__(**kwargs)


class PasswordField(StringField, FieldAutoGenerated):
    """
    A field for storing a password value, which differs from a simple
    string by its ability to hash values.
    """

    @staticmethod
    def generate(password, salt, pepper):
        """
        Hashes the values passed to it using the hashing algorithm set
        in `settings` object.
        """

        return settings.password_hasher(password, salt, pepper)


class RandomStringField(StringField, FieldAutoGenerated):
    """
    Standard string field, but with the ability to generate a random
    value.
    """

    def generate(self, length: int = None) -> str:
        """
        Generates a random string of alphabet [a-zA-Z + `special symbols`].

        If this field is of limited length, by default the generated
        string will be of this length, otherwise you must specify the
        desired length.
        """

        length = length or self.column_type.length
        if length is None:
            raise ValueError('Length of random string is <None>!')
        return generate_random_advanced_string(length)


class DateTimeField(FieldDefault):
    """Standard field with DateTime type."""

    column_type = DateTime
